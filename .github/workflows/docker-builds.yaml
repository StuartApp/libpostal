name: docker builds
on: [push, pull_request]

jobs:
  build:
    name: Build OS packages inside a docker container and create release
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Make git short-commit available for the different steps
      id: metadata
      env:
        UBUNTU_VERSIONS: 16.04 18.04
      run: |
        echo "::set-output name=commit::$(echo ${GITHUB_SHA} | head -c7)"
        echo "::set-output name=version::$(sed 's|^v||' versions/parser)"
    - name: Build
      env:
        DOCKER_IMAGE_NAME: stuart/libpostal
        UBUNTU_VERSIONS: 16.04 18.04
      run: |
        pwd
        ls -hal
        git status -sb
        for ubuver in ${UBUNTU_VERSION}
        do
          docker build \
            --build-arg UBUNTU_VERSION=${ubuver} \
            -t ${DOCKER_IMAGE_NAME}:${ubuver} .
            CID=$(docker create ${DOCKER_IMAGE_NAME})
            mkdir output-${ubuver}
            docker cp ${CID}:/output-${ubuver} ./
        done
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: ${{ steps.metadata.outputs.version }}-${{ steps.metadata.outputs.commit }}
        release_name: Release ${{ steps.metadata.outputs.version }}-${{ steps.metadata.outputs.commit }}
        body: |
          Automatically generated by GH action on this project
        draft: false
        prerelease: false
    - name: Upload ubuntu-16.04 .deb package release asset
      id: upload-deb-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./output-16.04/libpostal_${{ steps.metadata.outputs.version }}+git${{ steps.metadata.outputs.commit }}_amd64.deb
        asset_name: ubuntu-16.04-libpostal_${{ steps.metadata.outputs.version }}+git${{ steps.metadata.outputs.commit }}_amd64.deb #FIXME: find a way to dynamically set upstream version
        asset_content_type: application/vnd.debian.binary-package
    - name: Upload data release asset
      id: upload-data-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./output-16.04/data.tgz
        asset_name: ubuntu-16.04-data-${{ steps.metadata.outputs.version }}-${{ steps.metadata.outputs.commit }}.tar.gz #FIXME: find a way to dynamically set upstream version
        asset_content_type: application/tar+gzip
    - name: Upload ubuntu-18.04 .deb package release asset
      id: upload-deb-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./output-18.04/libpostal_${{ steps.metadata.outputs.version }}+git${{ steps.metadata.outputs.commit }}_amd64.deb
        asset_name: ubuntu-18.04-libpostal_${{ steps.metadata.outputs.version }}+git${{ steps.metadata.outputs.commit }}_amd64.deb #FIXME: find a way to dynamically set upstream version
        asset_content_type: application/vnd.debian.binary-package
    - name: Upload data release asset
      id: upload-data-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./output-18.04/data.tgz
        asset_name: ubuntu-18.04-data-${{ steps.metadata.outputs.version }}-${{ steps.metadata.outputs.commit }}.tar.gz #FIXME: find a way to dynamically set upstream version
        asset_content_type: application/tar+gzip
